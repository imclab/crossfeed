<!DOCTYPE html>
<html>
 <head>
  <meta http-equiv="Content-Type"
        content="text/html; charset=us-ascii">
  <meta name="GENERATOR"
        content="Microsoft FrontPage 5.0">
  <meta name="author"
        content="geoff mclane">
  <meta name="keywords"
        content="geoff, mclane, geoffmclane, geoffmcl, computer, consultant, programmer">
  <meta name="description"
        content="Home page of a computer programmer">
  <link rel="SHORTCUT ICON"
        href="http://geoffmclane.com/icong.ico">
  <title>
   geodesic
  </title>
  <link rel="stylesheet"
        type="text/css"
        href="css/normalize.css">
  <link rel="stylesheet"
        type="text/css"
        href="css/home.css">
  <link rel="stylesheet"
        href="css/theme.css"
        type="text/css"><!-- <link rel="stylesheet" href="css/style.css" type="text/css" /> -->

  <style type="text/css">
<!-- 
  td            { vertical-align: top; }
  h1            { text-align: center; }
  .redb         { color: #FF0000; font-family: Arial; font-weight: bold }
  input         { text-align: right; width: 6em; }
  input         { background-color: #f0f0f0; }
  output        { color: #000099; font-weight: bold; }
  .inputs       { float: left; margin: 1em 2em 0 0; }
  .outputs      { margin: 1em 2em 0 0; }
  .hidden       { display: none; }
  .clear-floats { clear: both; }
  .ctr          { text-align: center; }
  .rt           { text-align: right; }
  -->
  </style>
  <script src="js/jquery-1.9.0.min.js"
        type="text/javascript">
</script>
  <script src="js/geodesic.js"
        type="text/javascript">
</script>
  <script src="http://maps.google.com/maps/api/js?sensor=false"
        type="text/javascript">
</script>
  <script type="text/javascript">

    // initialise maps
    var mapOptions = {
      zoom: 0,
      center: new google.maps.LatLng(0, 0),
      mapTypeId: google.maps.MapTypeId.HYBRID,
      mapTypeControlOptions: {
        style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
      },
      navigationControlOptions: {
        style: google.maps.NavigationControlStyle.SMALL
      },
      scaleControl: true
    };
    
    var maps = { // note we have to track overlay items ourselves
    orthoDist: { map:null, geodesic:true,  overlay: { marker1:null, marker2:null, path:null } },
    orthoDest: { map:null, geodesic:true,  overlay: { marker1:null, marker2:null, path:null } },
    //rhumbDist: { map:null, geodesic:false, overlay: { marker1:null, marker2:null, path:null } },
    //rhumbDest: { map:null, geodesic:false, overlay: { marker1:null, marker2:null, path:null } }
  };

  /* -- map fails --
  function drawPath(lat1, lon1, lat2, lon2, m) {
    google.maps.event.trigger(m.map, 'resize');  // Gaaaaaah!
    
    // clear current overlays
    if (m.overlay.marker1) { m.overlay.marker1.setMap(null); m.overlay.marker1 = null; }
    if (m.overlay.marker2) { m.overlay.marker2.setMap(null); m.overlay.marker1 = null; }
    if (m.overlay.path)    { m.overlay.path.setMap(null);    m.overlay.path = null; }
    
    // if supplied lat/long are all valid numbers, draw the path
    if (!isNaN(lat1+lon1+lat2+lon2)) {
      var p1 = new google.maps.LatLng(lat1, lon1);
      var p2 = new google.maps.LatLng(lat2, lon2);
      var sw = new google.maps.LatLng(Math.min(lat1, lat2), Math.min(lon1, lon2));
      var ne = new google.maps.LatLng(Math.max(lat1, lat2), Math.max(lon1, lon2));
      var bnds = new google.maps.LatLngBounds(sw, ne);
      m.map.fitBounds(bnds);
      m.overlay.marker1 = new google.maps.Marker({ map:m.map, position:p1, title:'Point 1'});   
      m.overlay.marker2 = new google.maps.Marker({ map:m.map, position:p2, title:'Point 2'});   
      m.overlay.path = new google.maps.Polyline({ map:m.map, path:[p1, p2], strokeColor:'#990000', geodesic:m.geodesic});
    }
  }

    function orthoDistMap() {
        var lat1 = parseFloat($('#ortho-dist .lat1').val());
        var lon1 = parseFloat($('#ortho-dist .lon1').val());
        var lat2 = parseFloat($('#ortho-dist .lat2').val());
        var lon2 = parseFloat($('#ortho-dist .lon2').val());
        drawPath(lat1, lon1, lat2, lon2, maps.orthoDist);
    }

  ------------------------------------------- */
   
  function orthoDistCalc() {
    var lat1 = parseFloat($('#ortho-dist .lat1').val());
    var lon1 = parseFloat($('#ortho-dist .lon1').val());
    var lat2 = parseFloat($('#ortho-dist .lat2').val());
    var lon2 = parseFloat($('#ortho-dist .lon2').val());
    var p1 = new LatLon(lat1, lon1);
    var p2 = new LatLon(lat2, lon2);
    $('#ortho-dist .result-dist').html(p1.distanceTo(p2));
    var az1 = p1.bearingTo(p2);
    var az2 = p1.finalBearingTo(p2);
    //$('#ortho-dist .result-brng1').html(Geo.toBrng(p1.bearingTo(p2),degFmt));
    //$('#ortho-dist .result-brng2').html(Geo.toBrng(p1.finalBearingTo(p2),degFmt));
    //$('#ortho-dist .result-midpt').html(p1.midpointTo(p2).toString(degFmt));
    $('#ortho-dist .result-brng1').html(az1.toPrecisionFixed(4));
    $('#ortho-dist .result-brng2').html(az2.toPrecisionFixed(4));
    var ll = p1.midpointTo(p2);
    var res = "Lat: "+ll._lat.toPrecisionFixed(6)+", Lon: "+ll._lon.toPrecisionFixed(6);
    $('#ortho-dist .result-midpt').html(res);
  }

   
  function orthoDestCalc() {
    var latStart = parseFloat($('#ortho-dest .lat1').val());
    var lonStart = parseFloat($('#ortho-dest .lon1').val())
    var brng = parseFloat($('#ortho-dest .brng').val());
    var dist = parseFloat($('#ortho-dest .dist').val());
    var p1 = new LatLon(latStart, lonStart);
    var p2 = p1.destinationPoint(brng, dist);
    var brngFinal = p1.finalBearingTo(p2);
    //$('#ortho-dest .result-point').html(p2.toString(degFmt));
    //$('#ortho-dest .result-brng').html(Geo.toBrng(brngFinal,degFmt));
    var res = "Lat: "+p2._lat.toPrecisionFixed(6)+", Lon: "+p2._lon.toPrecisionFixed(6);
    $('#ortho-dest .result-point').html(res);
    $('#ortho-dest .result-brng').html(brngFinal.toPrecisionFixed(4));
  }
      
  function rhumbDistCalc() {
    var lat1 = parseFloat($('#rhumb-dist .lat1').val());
    var lon1 = parseFloat($('#rhumb-dist .lon1').val());
    var lat2 = parseFloat($('#rhumb-dist .lat2').val());
    var lon2 = parseFloat($('#rhumb-dist .lon2').val());
    var p1 = new LatLon(lat1, lon1);
    var p2 = new LatLon(lat2, lon2);
    var dist = p1.rhumbDistanceTo(p2);
    var az1 = p1.rhumbBearingTo(p2);
    var ll = p1.rhumbMidpointTo(p2);
    $('#rhumb-dist .result-dist').html(dist);
    $('#rhumb-dist .result-brng').html(az1.toPrecisionFixed(4));
    var res = "Lat: "+ll._lat.toPrecisionFixed(6)+", Lon: "+ll._lon.toPrecisionFixed(6);
    $('#rhumb-dist .result-midpt').html(res);
  }

   function rhumbDestCalc() {
    var lat1 = parseFloat($('#rhumb-dest .lat1').val());
    var lon1 = parseFloat($('#rhumb-dest .lon1').val());
    var p1 = new LatLon(lat1, lon1);
    var brng = parseFloat($('#rhumb-dest .brng').val());
    var dist = parseFloat($('#rhumb-dest .dist').val());
    var p2 = p1.rhumbDestinationPoint(brng, dist);
    var res = "Lat: "+p2._lat.toPrecisionFixed(6)+", Lon: "+p2._lon.toPrecisionFixed(6);
    $('#rhumb-dest .result-point').html(res);
  }

  $(document).ready(function() {

    $('#ortho-dist input').change( function() { 
      orthoDistCalc(); 
      if ($('#map-ortho-dist-canvas').is(':visible')) orthoDistMap(); 
    });
    // toggle display of map - MAP FAILS
    //$('#ortho-dist .toggle-map a').click( function() {
    //  if (!maps.orthoDist.map) {
    //    var mapCanvas = document.getElementById("map-ortho-dist-canvas");
    //    maps.orthoDist.map = new google.maps.Map(mapCanvas, mapOptions);
    //  }
    //  $('#ortho-dist .toggle-map').toggle();
    //  $('#ortho-dist .map').toggle();
    //  orthoDistMap();
    //});
    
    // orthodrome destination point from start point / bearing / distance
    $('#ortho-dest input').change( function() { 
      orthoDestCalc() 
      // if ($('#map-ortho-dest-canvas').is(':visible')) orthoDestMap(); 
    });
     // rhumb lines distance
    $('#rhumb-dist input').change( function() { 
      rhumbDistCalc() 
      if ($('#map-rhumb-dist-canvas').is(':visible')) rhumbDistMap(); 
    });
   
    // rhumb lines destination
    $('#rhumb-dest input').change( function() { 
      rhumbDestCalc() 
      if ($('#map-rhumb-dest-canvas').is(':visible')) rhumbDestMap(); 
    });
    
  });
    
  function init() {
    //if (!maps.orthoDist.map) {
    //    var mapCanvas = document.getElementById("map-ortho-dist-canvas");
    //    maps.orthoDist.map = new google.maps.Map(mapCanvas, mapOptions);
    //}
    //$('#ortho-dist .toggle-map').toggle();
    //$('#ortho-dist .map').toggle();
    orthoDistCalc();
    //orthoDistMap();
    orthoDestCalc();
    rhumbDistCalc();
    rhumbDestCalc();
  }

  </script>
 </head>
 <body>
  <a id="top"></a>
  <h1>
   Geodesic Tests
  </h1>

  <p>
   These formulii are for calculations on the basis of a spherical earth (ignoring ellipsoidal
   effects) &#8211; which is accurate enough for most purposes&#8230; In fact, the earth is very
   slightly ellipsoidal; using a spherical model gives errors typically up to 0.3%.
  </p>

  <p>
   Enter the co-ordinates as signed decimal degrees, without compass direction, where negative
   indicates west/south (e.g. 40.7486, -73.9864) into the text boxes to try out the calculations.
   After adjusting some value you need to leave that text box to cause 'change' to re-do the
   calculations.
  </p>

  <h3>
   Distance
  </h3>

  <form name="ortho-dist"
        id="ortho-dist">
   <fieldset>
    <legend>Great-circle distance between two points</legend>
    <table class="inputs">
     <tr>
      <td>
       Point 1:
      </td>
      <td>
       <input type="text"
           name="lat1"
           class="lat1"
           value="50.0"
           placeholder="Lat 1 (N/-S)"
           title="Lat 1 (N/-S)"
           required=""> , <input type="text"
           name="lon1"
           class="lon1"
           value="-5.23"
           placeholder="Lon 1 (E/-W)"
           title="Lon 1 (E/-W)"
           required="">
      </td>
     </tr>

     <tr>
      <td>
       Point 2:
      </td>
      <td>
       <input type="text"
           name="lat2"
           class="lat2"
           value="58.5"
           placeholder="Lat 2 (N/-S)"
           title="Lat 2 (N/-S)"
           required=""> , <input type="text"
           name="lon2"
           class="lon2"
           value="-3.1"
           placeholder="Lon 2 (E/-W)"
           title="Lon 2 (E/-W)"
           required="">
      </td>
     </tr>
    </table>

    <table class="outputs">
     <tr>
      <td>
       Distance:
      </td>
      <td>
       <output class="result-dist"
           title="Distance (in km)">&nbsp;</output> km
      </td>
     </tr>

     <tr>
      <td>
       Initial bearing:
      </td>
      <td>
       <output class="result-brng1"
           title="Initial bearing (azimuth) between points">&nbsp;</output>
      </td>
     </tr>

     <tr>
      <td>
       Final bearing:
      </td>
      <td>
       <output class="result-brng2"
           title="Final bearing (azimuth) between points">&nbsp;</output>
      </td>
     </tr>

     <tr>
      <td>
       Midpoint:
      </td>
      <td>
       <output class="result-midpt"
           title="Midpoint between points">&nbsp;</output>
      </td>
     </tr>
    </table>
    <!-- map fails ***
  <p class="toggle-map"><a>View Map</a></p>
  <p class="toggle-map hidden"><a>Hide Map</a></p>
  <div id="map-ortho-dist-canvas" class="map"></div>
  *** -->
   </fieldset>
  </form>

  <h3>
   Bearing
  </h3>

  <form name="ortho-dest"
        id="ortho-dest">
   <fieldset>
    <legend>Destination point along great-circle given distance and bearing from start
    point</legend>
    <table class="inputs">
     <tr>
      <td>
       Start point:
      </td>
      <td>
       <input name="lat1"
           class="lat1"
           type="text"
           value="50.0">, <input name="lon1"
           class="lon1"
           type="text"
           value="-5.23">
      </td>
     </tr>

     <tr>
      <td>
       Bearing:
      </td>
      <td>
       <input type="text"
           name="brng"
           class="brng"
           value="7.471">
      </td>
     </tr>

     <tr>
      <td>
       Distance:
      </td>
      <td>
       <input name="dist"
           class="dist w4"
           type="number"
           step="any"
           value="955.1"> km
      </td>
     </tr>
    </table>

    <table class="outputs">
     <tr>
      <td>
       Destination point:
      </td>
      <td>
       <output class="result-point"
           title="Destination point">&nbsp;</output>
      </td>
     </tr>

     <tr>
      <td>
       Final bearing:
      </td>
      <td>
       <output class="result-brng"
           title="Final bearing (azimuth) arriving at point 2">&nbsp;</output>
      </td>
     </tr>
     <!-- 
    <tr>
      <td>
        <p class="toggle-map"><a>view map</a></p>
        <p class="toggle-map hidden"><a>hide map</a></p>
      </td>
      <td>&nbsp;</td>
    </tr> -->
    </table>
    <!-- <div id="map-ortho-dest-canvas" class="map"></div> -->
   </fieldset>
  </form>

  <h3>
   Rhumb-line Distance
  </h3>

  <form name="rhumb-dist"
        id="rhumb-dist">
   <fieldset>
    <legend>Rhumb-line distance between two points</legend>
    <table class="inputs">
     <tr>
      <td>
       Point 1:
      </td>
      <td>
       <input name="lat1"
           class="lat1"
           type="text"
           value="50.0"
           title="Latitude 1">, <input name="lon1"
           class="lon1"
           type="text"
           value="-5.23"
           title="Longitude 1">
      </td>
     </tr>

     <tr>
      <td>
       Point 2:
      </td>
      <td>
       <input name="lat2"
           class="lat2"
           type="text"
           value="58.5"
           title="Latitude 2">, <input name="lon2"
           class="lon2"
           type="text"
           value="-3.1"
           title="Longitude 2">
      </td>
     </tr>
    </table>

    <table class="outputs">
     <tr>
      <td>
       Distance:
      </td>
      <td>
       <output class="result-dist"
           title="Distance (in km)">&nbsp;</output> km
      </td>
     </tr>

     <tr>
      <td>
       Bearing:
      </td>
      <td>
       <output class="result-brng"
           title="Bearing (azimuth) between points">&nbsp;</output>
      </td>
     </tr>

     <tr>
      <td>
       Midpoint:
      </td>
      <td>
       <output class="result-midpt"
           title="Midpoint between points">&nbsp;</output>
      </td>
     </tr>
     <!-- <tr>
      <td>
      <p class="toggle-map"><a>view map</a></p>
      <p class="toggle-map hidden"><a>hide map</a></p>
      </td>
      <td>&nbsp;</td>
    </tr> -->
    </table>
    <!-- <div id="map-rhumb-dist-canvas" class="map"></div> -->
   </fieldset>
  </form>

  <h3>
   Rhumb-line Bearing
  </h3>

  <form name="rhumb-dest"
        id="rhumb-dest"
        class="demo">
   <fieldset>
    <legend>Destination point along rhumb line given distance and bearing from start
    point</legend>
    <div class="inputs">
     <table>
      <tr>
       <td>
        Start point:
       </td>
       <td>
        <input name="lat1"
            class="lat1"
            type="text"
            value="50.0">, <input name="lon1"
            class="lon1"
            type="text"
            value="-5.23">
       </td>
      </tr>

      <tr>
       <td>
        Bearing:
       </td>
       <td>
        <input name="brng"
            class="brng"
            type="text"
            value="7.471">
       </td>
      </tr>

      <tr>
       <td>
        Distance:
       </td>
       <td>
        <input name="dist"
            class="dist w4"
            type="number"
            step="any"
            value="955.1"> km
       </td>
      </tr>
     </table>
    </div>

    <table class="outputs">
     <tr>
      <td>
       Destination point:
      </td>
      <td>
       <output class="result-point"
           title="Destination points">&nbsp;</output>
      </td>
     </tr>
     <!-- <tr>
      <td>
        <p class="toggle-map"><a>view map</a></p>
        <p class="toggle-map hidden"><a>hide map</a></p>
      </td>
      <td>&nbsp;</td>
    </tr> -->
    </table>
    <!-- <div id="map-rhumb-dest-canvas" class="map"></div> -->
    <!-- <p>&nbsp;</p> -->
   </fieldset>
  </form>

  <h4>
   Creative Common Attribution
  </h4>

  <table class="ctr">
   <tr>
    <td>
     See original page <a target="_blank"
         href="http://movable-type.co.uk/scripts/latlong.html">here</a>. My big thanks to Chris
         Veness for this great test page. And below his image showing how a great circle 'track',
         in red, can begin with one heading, and end with another, is worth a thousand words.
    </td>
   </tr>

   <tr>
    <td>
     <img src="images/baghdad-to-osaka.jpg"
         alt="Baghdad to Osaka"
         width="180"
         height="180">
    </td>
   </tr>

   <tr>
    <td>
     Baghdad (33.26194,44.2338025) to Osaka (34.785603,135.4380195) - not a constant bearing!
     <br>
     Great circle distance: 8077 km, with initial bearing: 59.35, and final bearing: 118.8, shown.
     <br>
     Rhumb-line distance: 8407 km, with constant bearing: 88.85, not shown.
    </td>
   </tr>
  </table>

  <p class="rt">
   20130122 - geodesic.htm
  </p>

  <p>
   <img src="images/HTML5_Badge_32.png"
      alt="Valid HTML5 Experimental"
      height="32"
      width="32"> <a href="http://tidy.sourceforge.net"><img src="images/checked_by_tidy.gif"
        border="0"
        alt="Checked by Tidy!"
        height="32"
        width="32"></a> <script type="text/javascript">
init();
   </script>
  </p>
 </body>
</html>
